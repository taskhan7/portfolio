(* 
                         CS 51 Final Project
                         MiniML -- Evaluation
*)

(* This module implements a small untyped ML-like language under
   various operational semantics.
 *)

open Expr ;;
  
(* Exception for evaluator runtime, generated by a runtime error in
   the interpreter *)
exception EvalError of string ;;
  
(* Exception for evaluator runtime, generated by an explicit `raise`
   construct in the object language *)
exception EvalException ;;

(*......................................................................
  Environments and values 
 *)

module type ENV = sig
    (* the type of environments *)
    type env
	   
    (* the type of values (including closures) stored in
       environments *)
    type value =
      | Val of expr
      | Closure of (expr * env)
   
    (* empty () -- Returns an empty environment *)
    val empty : unit -> env

    (* close expr env -- Returns a closure for `expr` and its `env` *)
    val close : expr -> env -> value

    (* lookup env varid -- Returns the value in the `env` for the
       `varid`, raising an `Eval_error` if not found *)
    val lookup : env -> varid -> value

    (* extend env varid loc -- Returns a new environment just like
       `env` except that it maps the variable `varid` to the `value`
       stored at `loc`. This allows later changing the value, an
       ability used in the evaluation of `letrec`. To make good on
       this, extending an environment needs to preserve the previous
       bindings in a physical, not just structural, way. *)
    val extend : env -> varid -> value ref -> env

    (* env_to_string env -- Returns a printable string representation
       of environment `env` *)
    val env_to_string : env -> string
                                 
    (* value_to_string ?printenvp value -- Returns a printable string
       representation of a value; the optional flag `printenvp`
       (default: `true`) determines whether to include the environment
       in the string representation when called on a closure *)
    val value_to_string : ?printenvp:bool -> value -> string
  end

module Env : ENV =
  struct
    type env = (varid * value ref) list
     and value =
       | Val of expr
       | Closure of (expr * env)

    let empty () : env = []

    let close (exp : expr) (env : env) : value =
      match exp with 
      | Fun(_x, _y) -> Closure(exp, env)
      | _ -> raise (EvalError "not a function")

    let rec lookup (env : env) (varname : varid) : value =
      match env with
      | [] -> raise (EvalError "not found")
      | (x, y) :: tl -> if x = varname then !y
                                       else lookup tl varname 
      
    let extend (env : env) (varname : varid) (loc : value ref) : env =
      let rec search (env : env) (varname : varid) : bool =
        match env with
        | [] -> false
        | (x, y) :: tl -> if x = varname then true
                                         else search tl varname in 
      if (search env varname) then 
        List.map(fun (x, y) -> if x = varname then y:= !loc; (x, y)) env
      else env @ [(varname, loc)]

    let rec value_to_string ?(printenvp : bool = true) (v : value) : string =
      match v with 
      | Val(x) -> "Val(" ^ exp_to_abstract_string x ^ ")"
      | Closure(x, y) ->  if printenvp = true then
                            "Closure(" ^ exp_to_abstract_string x ^ "," ^ env_to_string y ^ ")"
                          else "Closure(" ^ exp_to_abstract_string x ^ ")"

    and env_to_string (env : env) : string =
      String.concat (" ") (List.map(fun x -> "(" ^ fst x ^ "," ^ value_to_string !(snd x) ^ "),") env) 
  
  end
;;


(*......................................................................
  Evaluation functions

  Each of the evaluation functions below evaluates an expression `exp`
  in an environment `env` returning a result of type `value`. We've
  provided an initial implementation for a trivial evaluator, which
  just converts the expression unchanged to a `value` and returns it,
  along with "stub code" for three more evaluators: a substitution
  model evaluator and dynamic and lexical environment model versions.

  Each evaluator is of type `expr -> Env.env -> Env.value` for
  consistency, though some of the evaluators don't need an
  environment, and some will only return values that are "bare
  values" (that is, not closures). 

  DO NOT CHANGE THE TYPE SIGNATURES OF THESE FUNCTIONS. Compilation
  against our unit tests relies on their having these signatures. If
  you want to implement an extension whose evaluator has a different
  signature, implement it as `eval_e` below.  *)

(* The TRIVIAL EVALUATOR, which leaves the expression to be evaluated
   essentially unchanged, just converted to a value for consistency
   with the signature of the evaluators. *)
   
let eval_t (exp : expr) (_env : Env.env) : Env.value =
  (* coerce the expr, unchanged, into a value *)
  Env.Val exp ;;

(* The SUBSTITUTION MODEL evaluator -- to be completed *)

let value_to_expr (x : Env.value) : expr =
  match x with
  | Val(x) -> x
  | Closure(x, _y) -> x ;;
  
let rec eval_s (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with 
  | Var(_x) -> raise (EvalError "Unbound Var")           
  | Num(x) -> Env.Val(Num(x))                       
  | Bool(x) -> Env.Val(Bool(x))                         
  | Unop(_x, y) -> let Env.Val(z) = eval_s y _env in
                      (match z with
                      | Num(x) -> Env.Val(Num(~-x))  
                      | _ -> raise (EvalError "not an integer"))        
  | Binop(x, y, z) -> let Env.Val(m), Env.Val(m1) = (eval_s y _env), (eval_s z _env) in 
                        (match m, m1 with 
                        | Num(x1), Num(x2) -> (match x with 
                                              | Plus -> Env.Val(Num(x1 + x2))
                                              | Minus -> Env.Val(Num(x1 - x2))
                                              | Times -> Env.Val(Num(x1 * x2))
                                              | Divide -> Env.Val(Num(x1 / x2))
                                              | Equals -> Env.Val(Bool(x1 = x2))
                                              | LessThan -> Env.Val(Bool(x1 < x2))
                                              | GreaterThan -> Env.Val(Bool(x1 > x2)))
                        | Bool(x1), Bool(x2) -> (match x with 
                                                | Equals -> Env.Val(Bool(x1 = x2))
                                                | LessThan -> Env.Val(Bool(x1 < x2))
                                                | GreaterThan -> Env.Val(Bool(x1 > x2))
                                                | _ ->  raise (EvalError "improper types"))              
                        | _ -> raise (EvalError "improper types"))
  | Conditional(x, y, z) -> (match (eval_s x _env) with
                            | Env.Val(Bool(x)) -> if x then eval_s y _env
                                                  else eval_s z _env
                            | _ -> raise (EvalError "improper types"))
  | Fun(x, y) -> Env.Val(Fun(x, y))                 
  | Let(x, y, z) -> eval_s (subst x (value_to_expr (eval_s y _env)) z) _env        
  | Letrec(x, y, z) -> let vd = value_to_expr (eval_s y _env) in 
                       eval_s (subst x (subst x (Letrec(x, vd, Var(x))) vd) z) _env 
  | Raise -> Env.Val(Raise)                              
  | Unassigned -> Env.Val(Unassigned)                          
  | App(x, y) -> (match (eval_s x _env) with
                          | Env.Val(Fun(x1,y1)) -> eval_s (subst x1 (value_to_expr (eval_s y _env)) y1) _env 
                          | _ -> raise (EvalError "not a function"))               
  ;;
     
(* The DYNAMICALLY-SCOPED ENVIRONMENT MODEL evaluator -- to be
   completed *)

let rec eval_d (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with
  | Var(x) -> Env.lookup _env x                        
  | Num(x) -> Env.Val(Num(x))                        
  | Bool(x) -> Env.Val(Bool(x))                        
  | Unop(_x, y) -> let Env.Val(z) = eval_d y _env in
                  (match z with
                   | Num(x) -> Env.Val(Num(~-x))  
                   | _ -> raise (EvalError "not an integer"))                   
  | Binop(x, y, z) -> let (Env.Val(m), Env.Val(m1)) = (eval_d y _env, eval_d z _env) in 
                        (match m, m1 with 
                        | Num(x1), Num(x2) ->  (match x with 
                                               | Plus -> Env.Val(Num(x1 + x2))
                                               | Minus -> Env.Val(Num(x1 - x2))
                                               | Times -> Env.Val(Num(x1 * x2))
                                               | Divide -> Env.Val(Num(x1 / x2))
                                               | Equals -> Env.Val(Bool(x1 = x2))
                                               | LessThan -> Env.Val(Bool(x1 < x2))
                                               | GreaterThan -> Env.Val(Bool(x1 > x2)))
                        | Bool(x1), Bool(x2) -> (match x with 
                                                | Equals -> Env.Val(Bool(x1 = x2))
                                                | LessThan -> Env.Val(Bool(x1 < x2))
                                                | GreaterThan -> Env.Val(Bool(x1 > x2))
                                                |_ ->  raise (EvalError "improper types"))              
                        | _ -> raise (EvalError "improper types"))      
  | Conditional(x, y, z) ->  (match (eval_d x _env) with
                              | Env.Val(Bool(x)) -> if x then eval_d y _env
                                                    else eval_d z _env
                              | _ -> raise (EvalError "improper types"))   
  | Fun(x, y) -> Env.Val(Fun(x, y))                  
  | Let(x, y, z) -> eval_d z (Env.extend _env x (ref (eval_d y _env)))          
  | Letrec(x, y, z) -> eval_d z (Env.extend _env x (ref (eval_d y _env)))      
  | Raise -> Env.Val(Raise)                                
  | Unassigned -> Env.Val(Unassigned)                         
  | App(x, y) -> (match (eval_d x _env) with
                 | Env.Val(Fun(t, a)) -> eval_d a (Env.extend _env t (ref (eval_d y _env)))
                 | _ -> raise (EvalError "not a function")) 
 ;;
 
       
(* The LEXICALLY-SCOPED ENVIRONMENT MODEL evaluator -- optionally
   completed as (part of) your extension *)
   
let rec eval_l (_exp : expr) (_env : Env.env) : Env.value =
  match _exp with
  | Fun(x, y) -> Env.close(Fun(x, y))(_env)
  | App(x, y) -> (match (eval_l x _env) with
                  | Env.Closure(Fun(t, a), x) -> eval_l a (Env.extend x t (ref (eval_l y _env)))
                  | _ -> raise (EvalError "not a function")) 
  | Letrec(x, y, z) -> let env_x = Env.extend(_env)(x)(ref(Env.Val(Unassigned))) in 
                       let vd = eval_l y env_x in
                       let env_y = Env.extend(env_x)(x)(ref(vd)) in
                       eval_l z env_y
  | _ -> eval_d _exp _env ;; 

(* The EXTENDED evaluator -- if you want, you can provide your
   extension as a separate evaluator, or if it is type- and
   correctness-compatible with one of the above, you can incorporate
   your extensions within `eval_s`, `eval_d`, or `eval_l`. *)

let eval_e _ =
  failwith "eval_e not implemented" ;;
  
(* Connecting the evaluators to the external world. The REPL in
   `miniml.ml` uses a call to the single function `evaluate` defined
   here. Initially, `evaluate` is the trivial evaluator `eval_t`. But
   you can define it to use any of the other evaluators as you proceed
   to implement them. (We will directly unit test the four evaluators
   above, not the `evaluate` function, so it doesn't matter how it's
   set when you submit your solution.) *)
   
let evaluate = eval_d ;;
